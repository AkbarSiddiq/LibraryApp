import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Link from "next/link";
import { app, database, storage } from "../firebaseConfig";
import { collection, addDoc, getDocs, doc, deleteDoc, increment, updateDoc } from "firebase/firestore";
import { getStorage, ref, uploadBytes, getDownloadURL, listAll, list } from "firebase/storage";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { v4 } from "uuid";
import { async } from "@firebase/util";
import { data } from "autoprefixer";

export default function Home() {
  const [title, setTitle] = useState("");
  const [sinops, setSinops] = useState("");
  const [ID, setID] = useState(null);
  const [pages, setPages] = useState("");
  const [availibility, setAvailibility] = useState("");
  const [isUpdate, setIsUpdate] = useState(false);
  const [firedata, setFireData] = useState([]);
  const databaseRef = collection(database, "books");
  const storage = getStorage();
  const storageRef = ref(storage);
  const router = useRouter();
  useEffect(() => {
    const token = sessionStorage.getItem("Token");
    if (token) {
      getData();
    }
    if (!token) {
      router.push("/login");
    }
  }, []);
  const addData = () => {
    addDoc(databaseRef, {
      title: title,
      sinops: sinops,
      pages: pages,
      availibility: availibility,
    })
      .then(() => {
        alert("Data Masuk");
        getData();
        setTitle("");
        setSinops("");
        setPages(null);
        setAvailibility(null);
      })
      .catch((err) => {
        console.error(err);
      });
  };

  const getData = async () => {
    await getDocs(databaseRef).then((response) => {
      setFireData(
        response.docs.map((data) => {
          return { ...data.data(), id: data.id };
        })
      );
    });
  };

  const getID = (id, title, sinops, pages, availibility) => {
    setID(id);
    setTitle(title);
    setSinops(sinops);
    setPages(pages);
    setAvailibility(availibility);
    setIsUpdate(true);
  };
  const updateFields = () => {
    let fieldToEdit = doc(database, "books", ID);
    updateDoc(fieldToEdit, {
      title: title,
      sinops: sinops,
      pages: Number(pages),
      availibility: Number(availibility),
    })
      .then(() => {
        alert("data Updated");
        getData();
        setTitle("");
        setSinops("");
        setPages(null);
        setAvailibility(null);
        setIsUpdate(false);
      })
      .catch((err) => {
        alert(err);
      });
  };

  const updateAvailibility = (id) => {
    let availRef = doc(database, "books", id);
    updateDoc(availRef, {
      availibility: increment(-1),
    });
  };

  const deleteDocument = (id) => {
    let fieldToEdit = doc(database, "books", id);
    deleteDoc(fieldToEdit)
      .then(() => {
        alert("terhapus");
        getData();
      })
      .catch(() => {
        alert("gabisa");
      });
  };
  const logout = () => {
    sessionStorage.removeItem("Token");
    router.push("/");
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Admin Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="">
        <div className="flex justify-end px-8">
          <button
            onClick={logout}
            className="py-2 px-4  bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500 focus:ring-offset-indigo-200 text-white w-24 transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2  rounded-lg"
          >
            Log Out
          </button>
        </div>
        <h1 className="text-2xl text-center underline py-24">Admin Page</h1>
      </main>
      <div className="flex py-24 justify-center">
        <main className="flex-row">
          <h1 className="text-center py-8 text-4xl font-bold">Create, Delete, or Update Data</h1>
          <div className="py-8">
            <input
              type="text"
              className="my-3 rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent"
              placeholder="Title"
              value={title}
              onChange={(event) => setTitle(event.target.value)}
            />
            <input
              type="text"
              className="my-3 rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent"
              placeholder="Sinopsis"
              value={sinops}
              onChange={(event) => setSinops(event.target.value)}
            />
            <input
              type="number"
              className="my-3 rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent"
              placeholder="Pages"
              value={pages}
              onChange={(event) => setPages(event.target.value)}
            />
            <input
              type="number"
              className="my-3 rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent"
              placeholder="Availibility"
              value={availibility}
              onChange={(event) => setAvailibility(event.target.value)}
            />
          </div>
          {isUpdate ? (
            <button
              className="py-2 px-4  bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500 focus:ring-offset-indigo-200 text-white w-full transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2  rounded-lg"
              onClick={updateFields}
            >
              Update
            </button>
          ) : (
            <button
              className="py-2 px-4  bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500 focus:ring-offset-indigo-200 text-white w-full transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2  rounded-lg"
              onClick={addData}
            >
              ADD
            </button>
          )}
          <div>
            {firedata.map((data) => {
              return (
                <div class="flex max-w-md bg-gray-300 shadow-lg rounded-lg overflow-hidden my-8">
                  <img
                    src="https://images.unsplash.com/photo-1532153955177-f59af40d6472?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=60&raw_url=true&ixid=MnwxMjA3fDB8MHxzZWFyY2h8ODZ8fGJvb2t8ZW58MHx8MHx8&auto=format&fit=crop&w=500"
                    class="w-1/3 bg-cover bg-landscape"
                  ></img>
                  <div class="w-2/3 p-4">
                    <h1 class="text-gray-900 font-bold text-2xl">{data.title}</h1>
                    <p class="mt-2 text-gray-600 text-sm">{data.sinops}</p>
                    <p class="mt-2 text-gray-600 text-sm">Pages: {data.pages}</p>
                    <p class="mt-2 text-gray-600 text-sm">Availibility: {data.availibility}</p>

                    <div class="flex item-center justify-between mt-3">
                      <button class="px-3 py-2 bg-gray-800 text-white text-xs font-bold uppercase rounded" onClick={() => getID(data.id, data.title, data.sinops, data.pages, data.availibility)}>
                        Update
                      </button>
                      <button class="px-3 py-2 bg-gray-800 text-white text-xs font-bold uppercase rounded" onClick={() => deleteDocument(data.id)}>
                        Delete
                      </button>
                      <button class="px-3 py-2 bg-gray-800 text-white text-xs font-bold uppercase rounded" onClick={() => updateAvailibility}>
                        Borrow
                      </button>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </main>
      </div>
    </div>
  );
}
